package com.bprise.orbit.migration.handler;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Component;

import com.bprise.orbit.migration.util.Constants;
import com.bprise.orbit.migration.util.QueryStore;
import com.datastax.driver.core.BoundStatement;
import com.datastax.driver.core.PreparedStatement;
import com.datastax.driver.core.ResultSet;
import com.datastax.driver.core.Row;
import com.datastax.driver.core.Session;
import com.datastax.driver.core.UDTValue;

import redis.clients.jedis.Jedis;

/**
 * LocationHandler Program implements updated ads record detail from cassandra
 * to Redis.
 * 
 * @author vishal.shelar
 *
 */
@Component
public class AudienceHandler implements Handler {

	/**
	 * This api take the updated ad id's from cassandra and update the ad
	 * details for Redis
	 * <p>
	 * It first deletes all updated id's and then create the new keys with
	 * respect to updated id's.
	 * 
	 * @param ids
	 * @param session
	 * @param jedis
	 */
	public void update(List<Long> ids, Session session, Jedis jedis) {
		ids.forEach(p -> {
			jedis.keys(Constants.AUD_REDIS_KEY + p + "*").forEach(t -> {
				jedis.smembers(t).stream().forEach(s -> jedis.del(s));
				jedis.del(t);
			});
			;
		});
		PreparedStatement prepared = session.prepare(QueryStore.GET_AUDIENCE);
		BoundStatement bound = prepared.bind(ids);
		ResultSet rs = session.execute(bound);
		List<Row> rows = rs.all();
		for (Row row : rows) {
			setAudienceDetails(row, jedis);
		}
	}

	private void setAudienceDetails(Row row, Jedis jedis) {
		Map<Long, UDTValue> audienceMap = row.getMap("aud_rules", Long.class, UDTValue.class);
		if (!audienceMap.isEmpty()) {
			for (Map.Entry<Long, UDTValue> entryset : audienceMap.entrySet()) {
				Map<String, String> audienceDetails = new HashMap<String, String>();
				audienceDetails.put("status", entryset.getValue().getString("status"));
				audienceDetails.put(entryset.getValue().getString("attribute_name"),
						entryset.getValue().getString("attribute_value"));
				jedis.hmset("rule_attr_" + entryset.getValue().getLong("audience_rule_set_attribute_id"),
						audienceDetails);
				jedis.sadd(
						Constants.AUD_REDIS_KEY + row.getLong(Constants.AUDIENCE_RULE_CASSANDRA_ID) + ":" + "rule_"
								+ row.getLong("audience_rule_set_id"),
						"rule_attr_" + entryset.getValue().getLong("audience_rule_set_attribute_id"));
			}
		}
		

	}
	
	/*private void setAudienceDetails(Row row, Jedis jedis) {
		Map<Long, UDTValue> audienceMap = row.getMap("aud_rules", Long.class, UDTValue.class);
		Map<String,List<String>> audienceMapping = new HashMap<String,List<String>>();
		List<String> values = new ArrayList<String>();
		if (!audienceMap.isEmpty()) {
			for (Map.Entry<Long, UDTValue> entryset : audienceMap.entrySet()) {
				
				Map<String, String> audienceDetails = new HashMap<String, String>();
				
				values.add(entryset.getValue().getString("attribute_value"));
				audienceMapping.put(entryset.getValue().getString("attribute_name")+"_"+entryset.getValue().getString("status"),values);
				audienceDetails.put("status", entryset.getValue().getString("status"));
				audienceDetails.put(entryset.getValue().getString("attribute_name"),
						entryset.getValue().getString("attribute_value"));
				jedis.hmset("rule_attr_" + entryset.getValue().getLong("audience_rule_set_attribute_id"),
						audienceDetails);
				jedis.sadd(
						Constants.AUD_REDIS_KEY + row.getLong(Constants.AUDIENCE_RULE_CASSANDRA_ID) + ":" + "rule_"
								+ row.getLong("audience_rule_set_id"),
						"rule_attr_" + entryset.getValue().getLong("audience_rule_set_attribute_id"));
			}
		}
		

	}*/
	
}
